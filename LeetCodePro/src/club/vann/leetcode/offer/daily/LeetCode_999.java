package club.vann.leetcode.offer.daily;

/**
 * <p>难度：Easy</p>
 * <p>题目：车的可用捕获量</p>
 * <p>描述：在一个 8 x 8 的棋盘上，有一个白色车（rook）。也可能有空方块，白色的象（bishop）和黑色的卒（pawn）。它们分别以字符 “R”，“.”，“B” 和 “p” 给出。大写字符表示白棋，小写字符表示黑棋。
 * <p>
 * 车按国际象棋中的规则移动：它选择四个基本方向中的一个（北，东，西和南），然后朝那个方向移动，直到它选择停止、到达棋盘的边缘或移动到同一方格来捕获该方格上颜色相反的卒。另外，车不能与其他友方（白色）象进入同一个方格。
 * <p>
 * 返回车能够在一次移动中捕获到的卒的数量。
 *  
 * <p>
 * 示例 1：
 * <p>
 * 输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
 * 输出：3
 * 解释：
 * 在本例中，车能够捕获所有的卒。
 * 示例 2：
 * <p>
 * 输入：[[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
 * 输出：0
 * 解释：
 * 象阻止了车捕获任何卒。
 * 示例 3：
 * <p>
 * 输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
 * 输出：3
 * 解释：
 * 车可以捕获位置 b5，d6 和 f5 的卒。
 *  
 * <p>
 * 提示：
 * <p>
 * board.length == board[i].length == 8
 * board[i][j] 可以是 'R'，'.'，'B' 或 'p'
 * 只有一个格子上存在 board[i][j] == 'R'
 * 通过次数19,083提交次数27,557
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/available-captures-for-rook
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
 * Created with IntelliJ IDEA.
 * User: fanyu
 * Date: 2020/3/26
 * Time: 21:09
 * Description:
 */
public class LeetCode_999 {
    public static void main(String[] args) {
        char[][] board = null;
        int result = 0;
        LeetCode_999 leetCode = new LeetCode_999();

        board = new char[][] {{'.','.','.','.','.','.','.','.'},
                              {'.','.','.','p','.','.','.','.'},
                              {'.','.','.','R','.','.','.','p'},
                              {'.','.','.','.','.','.','.','.'},
                              {'.','.','.','.','.','.','.','.'},
                              {'.','.','.','p','.','.','.','.'},
                              {'.','.','.','.','.','.','.','.'},
                              {'.','.','.','.','.','.','.','.'}};
        result = leetCode.numRookCaptures(board);
        System.out.println("Result[3] : " + result);

        board = new char[][] {{'.','.','.','.','.','.','.','.'},
                              {'.','p','p','p','p','p','.','.'},
                              {'.','p','p','B','p','p','.','p'},
                              {'.','p','B','R','B','p','.','.'},
                              {'.','p','p','B','p','p','.','.'},
                              {'.','p','p','p','p','p','.','.'},
                              {'.','.','.','.','.','.','.','.'},
                              {'.','.','.','.','.','.','.','.'}};
        result = leetCode.numRookCaptures(board);
        System.out.println("Result[0] : " + result);

        board = new char[][] {{'.','.','.','.','.','.','.','.'},
                              {'.','.','.','p','.','.','.','.'},
                              {'.','.','.','p','.','.','.','.'},
                              {'p','p','.','R','.','p','B','.'},
                              {'.','.','.','.','.','.','.','.'},
                              {'.','.','.','B','.','.','.','.'},
                              {'.','.','.','p','.','.','.','.'},
                              {'.','.','.','.','.','.','.','.'}};
        result = leetCode.numRookCaptures(board);
        System.out.println("Result[3] : " + result);
    }

    private int numRookCaptures(char[][] board) {
        int result = 0;
        // 先计算出 R 的位置
        int indexX = 0, indexY = 0;
        one: for(int y = 0; y < 8; y ++) {
            for(int x = 0; x < 8; x ++) {
                if(board[y][x] == 'R') {
                    indexX = x;
                    indexY = y;
                    break one;
                }
            }
        }

        // 计算结果
        int[] dr = {-1, 1, 0, 0};
        int[] dc = {0, 0, -1, 1};
        two: for(int k = 0; k < 4; k ++) {
            int y = indexY + dr[k];
            int x = indexX + dc[k];

            while(y >= 0 && y < 8 && x >= 0 && x < 8 && board[y][x] != 'B') {
                if(board[y][x] == 'p') {
                    result += 1;
                    continue two;
                } else {
                    y = y + dr[k];
                    x = x + dc[k];
                }
            }
        }

        return result;
    }
}
